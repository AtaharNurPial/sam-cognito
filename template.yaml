AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Practicing Cognito user pool

Parameters:
  AppName:
    Type: String
    Description: Name of the application
  ClientDomains:
    Type: CommaDelimitedList
    Description: List of domains
  UserEmail:
    Type: String
    Description: Admin email address

Resources:
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${AppName}-UserPool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub ${AppName}-UserPoolClient
      GenerateSecret: false
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs: !Ref ClientDomains
      LogoutURLs: !Ref ClientDomains
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
        # - client_credentials
      AllowedOAuthScopes:
        - email
        - openid
        - profile

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub ${AppName}-${AWS::AccountId}
      UserPoolId: !Ref UserPool

  UserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      GroupName: Users
      Description: User Group
      Precedence: 0
      UserPoolId: !Ref UserPool

  CognitoRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'lambda.amazonaws.com'
                - 'mediaconvert.amazonaws.com'
                - 'cloudfront.amazonaws.com'
                - !Sub "states.${AWS::Region}.amazonaws.com"
                - 'mediapackage.amazonaws.com'
                - 'rds.amazonaws.com'
                - 'secretsmanager.amazonaws.com'
                - 'dax.amazonaws.com'
            Action: 
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 
                  - "cloudwatch:*"
                  - "cognito-identity:*"
                  - "cognito-idp:*"
                  - "cognito-sync:*"
                  - "dynamodb:*"
                Resource: '*'

  DefaultApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'*'"
      Cors:
        AllowMethods: "'*'"
        AllowHeaders: "'*'"
        AllowOrigin: "'*'"

  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: sign_up.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient         
      Role: !GetAtt CognitoRole.Arn
      Events:
        SignUp:
          Type: Api
          Properties:
            Path:  /signup
            Method: post
            RestApiId: !Ref DefaultApi

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: log_in.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        Login:
          Type: Api
          Properties:
            Path:  /login
            Method: post
            RestApiId: !Ref DefaultApi

  ValidateFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 5
      Handler: validate.lambda_handler
      Runtime: python3.8
      CodeUri: src/
      Environment:
        Variables:
          COGNITO_USER_CLIENT_ID: !Ref UserPoolClient
      Role: !GetAtt CognitoRole.Arn
      Events:
        ConfirmSignUp:
          Type: Api
          Properties:
            Path:  /confirm_signup
            Method: post
            RestApiId: !Ref DefaultApi



  # ForgotPwdFunction:
  #   Type: AWS::Serverless::Function
  #   Properties:
  #     Timeout: 5
  #     Handler: sign_up.lambda_handler
  #     Runtime: python3.8
  #     CodeUri: src/
  #     Environment:
  #       Variables:
  #         COGNITO_USER_CLIENT_ID: !Ref UserPoolClient         
  #     Role: !GetAtt CognitoRole.Arn
  #     Events:
  #       SignUp:
  #         Type: Api
  #         Properties:
  #           Path:  /forgot_password
  #           Method: post
  #           RestApiId: !Ref DefaultApi

  S3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: sll-storage-bucket
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: 
              - '*'
            AllowedOrigins: 
              - '*'
            AllowedMethods:
              - PUT
              - POST 
              - DELETE
              - GET
            AllowedOrigins: 
              - '*'
            ExposedHeaders:
              - ETag
              - x-amz-meta-custom-header

Outputs:
  UserPoolId:
    Description: "User pool ID"
    Value: !Ref UserPool
    Export:
      Name: !Sub ${AppName}:UserPoolId

  UserPoolClientId:
    Description: "Application client ID"
    Value: !Ref UserPoolClient

  AuthUrl:
    Description: "URL used for authentication"
    Value: !Sub https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com

  SignupFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Signup function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/signup/"

  LoginFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Login function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/login/"
  
  ValidateFunctionApi:
    Description: "API Gateway endpoint URL for Prod stage for Validate function"
    Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/confirm_signup/"

  # ForgotPwdFunctionApi:
  #   Description: "API Gateway endpoint URL for Prod stage for forgot password function"
  #   Value: !Sub "https://${DefaultApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/forgot_password/"

  BucketName:
    Value: !Ref S3Bucket
    Description: SLLStorageBucket Amazon S3 bucket with CORS enabled.
